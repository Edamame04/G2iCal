<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/PROJECT_STRUCTURE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PROJECT_STRUCTURE.md" />
              <option name="originalContent" value="# Google Calendar to iCal Converter - Project Structure Documentation&#10;&#10;## Project Overview&#10;A Java application that exports Google Calendar events to iCal format (.ics files) using object-oriented design principles and patterns.&#10;&#10;## Architecture Overview&#10;&#10;```&#10;google_calendar_iCal/&#10;├── src/main/java/&#10;│   ├── calendar.ICal.java                    # Main iCal container class&#10;│   ├── G2iCal.java                 # Command-line interface&#10;│   ├── calendar/                    # Domain objects package&#10;│   │   ├── CalendarEvent.java       # Event interface (abstraction)&#10;│   │   ├── MyEvent.java            # Concrete event implementation&#10;│   │   └── MyEventBuilder.java     # Builder pattern for event creation&#10;│   ├── exceptions/                  # Custom exception handling&#10;│   │   └── ICalExportException.java # Export-specific exceptions&#10;│   └── utils/                       # Utility classes package&#10;│       ├── CalendarApiConnector.java # Google Calendar API integration&#10;│       ├── EventConverter.java      # Event conversion logic&#10;│       ├── EventFactory.java       # Factory pattern for event creation&#10;│       └── InputValidator.java      # Input validation utilities&#10;├── src/main/resources/&#10;│  └── credentials.json             # Google API credentials&#10;└── tokens                          # Token storage for Google API&#10;```&#10;&#10;## Object-Oriented Design Patterns Implemented&#10;&#10;### 1. **Interface Segregation Principle**&#10;- **`CalendarEvent` Interface**: Defines contract for all calendar events&#10;- **Benefits**: Allows different event implementations, improves testability&#10;&#10;### 2. **Factory Pattern**&#10;- **`EventFactory`**: Centralized creation of CalendarEvent objects&#10;- **Methods**:&#10;  - `createFromGoogle(Event)`: Creates events from Google Calendar API&#10;  - `createFromData(...)`: Creates events from raw data&#10;- **Benefits**: Encapsulates object creation, easy to extend for new event types&#10;&#10;### 3. **Builder Pattern**&#10;- **`MyEventBuilder`**: Fluent API for constructing complex MyEvent objects&#10;- **Benefits**: Readable code, handles optional parameters, immutable object creation&#10;&#10;### 4. **Singleton Pattern**&#10;- **`CalendarApiConnector`**: Single instance for Google API connections&#10;- **Benefits**: Resource management, consistent authentication state&#10;&#10;### 5. **Custom Exception Handling**&#10;- **`ICalExportException`**: Specific exceptions for export operations&#10;- **Benefits**: Clear error handling, better debugging information&#10;&#10;## Class Responsibilities&#10;&#10;### Core Classes&#10;&#10;#### `calendar.ICal.java`&#10;**Purpose**: Main container for iCalendar data and export functionality&#10;**Key Responsibilities**:&#10;- Store collection of CalendarEvent objects&#10;- Generate iCal formatted strings&#10;- Export to .ics files&#10;- Handle export exceptions&#10;&#10;**Key Methods**:&#10;```java&#10;public void addGoogleEvent(Event event)           // Add Google Calendar event&#10;public String getICalString()                     // Generate iCal format&#10;public boolean exportICalToFile(String, String)  // Export to file&#10;```&#10;&#10;#### `G2iCal.java`&#10;**Purpose**: Command-line interface and application entry point&#10;**Key Responsibilities**:&#10;- Parse command-line arguments&#10;- Handle user interaction&#10;- Coordinate between API and export functionality&#10;- Manage application flow and error handling&#10;&#10;### Domain Package (`calendar/`)&#10;&#10;#### `CalendarEvent.java` (Interface)&#10;**Purpose**: Define contract for all calendar events&#10;**Methods**:&#10;```java&#10;String getUid(), getSummary(), getDescription(), getLocation()&#10;LocalDateTime getStart(), getEnd()&#10;String getOrganizer()&#10;List&lt;String&gt; getAttendees()&#10;String toICal()  // Convert to iCal format&#10;```&#10;&#10;#### `MyEvent.java`&#10;**Purpose**: Concrete implementation of calendar events&#10;**Key Features**:&#10;- Implements `CalendarEvent` interface&#10;- Stores all event data (UID, summary, description, location, times, organizer, attendees)&#10;- Provides iCal formatting logic&#10;- Includes getter/setter methods&#10;&#10;#### `MyEventBuilder.java`&#10;**Purpose**: Builder pattern for creating MyEvent objects&#10;**Usage Example**:&#10;```java&#10;MyEvent event = new MyEventBuilder()&#10;    .setUid(&quot;123&quot;)&#10;    .setSummary(&quot;Meeting&quot;)&#10;    .setStart(startTime)&#10;    .setEnd(endTime)&#10;    .build();&#10;```&#10;&#10;### Utilities Package (`utils/`)&#10;&#10;#### `EventConverter.java`&#10;**Purpose**: Convert Google Calendar Event objects to CalendarEvent objects&#10;**Key Features**:&#10;- Static utility methods&#10;- Handles date/time conversion&#10;- Extracts organizer and attendee information&#10;- Returns CalendarEvent interface (not concrete class)&#10;&#10;#### `EventFactory.java`&#10;**Purpose**: Factory for creating CalendarEvent instances&#10;**Key Features**:&#10;- Centralizes object creation logic&#10;- Uses EventConverter internally&#10;- Provides multiple creation methods&#10;- Returns interface types for flexibility&#10;&#10;#### `CalendarApiConnector.java`&#10;**Purpose**: Singleton for Google Calendar API integration&#10;**Key Features**:&#10;- Manages authentication&#10;- Provides calendar listing&#10;- Fetches events by date range&#10;- Handles API-specific exceptions&#10;&#10;#### `InputValidator.java`&#10;**Purpose**: Validate user inputs and command-line arguments&#10;**Key Features**:&#10;- Date format validation&#10;- Calendar index validation&#10;- Filename validation&#10;- Returns ValidationResult objects&#10;&#10;### Exceptions Package (`exceptions/`)&#10;&#10;#### `ICalExportException.java`&#10;**Purpose**: Custom exception for export-related errors&#10;**Key Features**:&#10;- Extends Exception (checked exception)&#10;- Provides specific error context&#10;- Wraps underlying IO exceptions&#10;&#10;## Design Principles Applied&#10;&#10;### 1. **Single Responsibility Principle (SRP)**&#10;- Each class has one clear purpose&#10;- EventConverter only handles conversion&#10;- InputValidator only handles validation&#10;- calendar.ICal only handles iCal operations&#10;&#10;### 2. **Open/Closed Principle (OCP)**&#10;- CalendarEvent interface allows new event types without modifying existing code&#10;- Factory pattern allows new creation methods&#10;- Strategy pattern ready for different export formats&#10;&#10;### 3. **Dependency Inversion Principle (DIP)**&#10;- calendar.ICal depends on CalendarEvent interface, not concrete MyEvent&#10;- EventFactory returns interfaces, not concrete classes&#10;- Easier testing with mock implementations&#10;&#10;### 4. **Interface Segregation Principle (ISP)**&#10;- CalendarEvent interface contains only necessary methods&#10;- No forced implementation of unused methods&#10;&#10;### 5. **Don't Repeat Yourself (DRY)**&#10;- EventConverter centralizes conversion logic&#10;- InputValidator centralizes validation logic&#10;- Factory pattern centralizes creation logic&#10;&#10;## Data Flow&#10;&#10;```&#10;1. User Input → G2iCal&#10;2. G2iCal → CalendarApiConnector (fetch calendars)&#10;3. G2iCal → CalendarApiConnector (fetch events)&#10;4. Google Events → EventFactory → CalendarEvent objects&#10;5. CalendarEvent objects → calendar.ICal container&#10;6. calendar.ICal → Generate iCal string → Export to file&#10;```&#10;&#10;## Extension Points&#10;&#10;### Easy to Add:&#10;1. **New Event Types**: Implement CalendarEvent interface&#10;2. **New Export Formats**: Strategy pattern for exporters&#10;3. **New Input Sources**: Factory pattern for event creation&#10;4. **New Validation Rules**: Extend InputValidator&#10;5. **New Exception Types**: Custom exception hierarchy&#10;&#10;### Future Enhancements:&#10;- **Observer Pattern**: Progress notifications during export&#10;- **Command Pattern**: CLI command objects&#10;- **Strategy Pattern**: Multiple export formats (JSON, XML)&#10;- **Template Method**: Different calendar provider integrations&#10;&#10;## Testing Strategy&#10;&#10;### Unit Testing Ready:&#10;- Interface-based design allows easy mocking&#10;- Factory pattern isolates object creation&#10;- Single responsibility makes testing focused&#10;- Custom exceptions provide specific test scenarios&#10;&#10;### Integration Testing:&#10;- CalendarApiConnector can be mocked for API testing&#10;- File export can be tested with temporary directories&#10;- End-to-end testing through G2iCal&#10;&#10;## Benefits of Current Structure&#10;&#10;1. **Maintainability**: Clear separation of concerns&#10;2. **Extensibility**: Easy to add new features&#10;3. **Testability**: Interface-based design&#10;4. **Reusability**: Utility classes can be reused&#10;5. **Error Handling**: Specific exceptions for different scenarios&#10;6. **Code Quality**: Follows OOP principles and design patterns&#10;&#10;## Dependencies&#10;&#10;- **Google Calendar API**: For calendar integration&#10;- **Java Time API**: For date/time handling&#10;- **Java NIO**: For file operations&#10;- **Standard Java Collections**: For data structures&#10;" />
              <option name="updatedContent" value="# Google Calendar to iCal Converter - Project Structure Documentation&#10;&#10;## Project Overview&#10;A Java application that exports Google Calendar events to iCal format (.ics files) using object-oriented design principles and patterns. Built with Gradle as the build system.&#10;&#10;## Architecture Overview&#10;&#10;```&#10;google_calendar_iCal/&#10;├── build.gradle                     # Gradle build configuration&#10;├── settings.gradle.kts              # Gradle settings&#10;├── gradlew                          # Gradle wrapper script (Unix)&#10;├── gradlew.bat                      # Gradle wrapper script (Windows)&#10;├── PROJECT_STRUCTURE.md             # This documentation file&#10;├── test.ics                         # Sample iCal output file&#10;├── src/&#10;│   ├── main/&#10;│   │   ├── java/&#10;│   │   │   ├── G2iCal.java          # Command-line interface&#10;│   │   │   ├── calendar/            # Domain objects package&#10;│   │   │   │   ├── CalendarEvent.java    # Event interface (abstraction)&#10;│   │   │   │   ├── ICal.java             # Main iCal container class&#10;│   │   │   │   ├── MyEvent.java          # Concrete event implementation&#10;│   │   │   │   └── MyEventBuilder.java   # Builder pattern for event creation&#10;│   │   │   ├── exceptions/          # Custom exception handling&#10;│   │   │   │   └── ICalExportException.java # Export-specific exceptions&#10;│   │   │   └── utils/               # Utility classes package&#10;│   │   │       ├── CalendarApiConnector.java # Google Calendar API integration&#10;│   │   │       ├── EventConverter.java      # Event conversion logic&#10;│   │   │       ├── EventFactory.java       # Factory pattern for event creation&#10;│   │   │       └── InputValidator.java     # Input validation utilities&#10;│   │   └── resources/&#10;│   │       └── credentials.json     # Google API credentials&#10;│   └── test/&#10;│       ├── java/                    # Test source files&#10;│       └── resources/               # Test resources&#10;├── build/                           # Gradle build output directory&#10;│   ├── classes/&#10;│   │   └── java/&#10;│   │       └── main/                # Compiled Java classes&#10;│   ├── generated/                   # Generated source files&#10;│   ├── reports/                     # Build reports&#10;│   ├── resources/&#10;│   │   └── main/                    # Processed resources&#10;│   └── tmp/                         # Temporary build files&#10;├── gradle/&#10;│   └── wrapper/                     # Gradle wrapper files&#10;│       ├── gradle-wrapper.jar&#10;│       └── gradle-wrapper.properties&#10;└── tokens/                          # Token storage for Google API&#10;    └── StoredCredential&#10;```&#10;&#10;## Build System&#10;This project uses **Gradle** as the build system, providing:&#10;- Dependency management&#10;- Automated building and testing&#10;- Cross-platform build scripts (gradlew/gradlew.bat)&#10;- Integration with modern Java development workflows&#10;&#10;## Object-Oriented Design Patterns Implemented&#10;&#10;### 1. Builder Pattern&#10;- **Class**: `MyEventBuilder`&#10;- **Purpose**: Provides a fluent interface for constructing complex `MyEvent` objects&#10;- **Benefits**: Improves readability and handles optional parameters elegantly&#10;&#10;### 2. Factory Pattern&#10;- **Class**: `EventFactory`&#10;- **Purpose**: Creates appropriate event objects based on input parameters&#10;- **Benefits**: Encapsulates object creation logic and provides flexibility&#10;&#10;### 3. Interface Segregation&#10;- **Interface**: `CalendarEvent`&#10;- **Implementation**: `MyEvent`&#10;- **Purpose**: Defines contract for calendar events, allowing for future extensions&#10;&#10;## Package Structure&#10;&#10;### calendar/&#10;Contains the core domain objects representing calendar events and the iCal container.&#10;&#10;### exceptions/&#10;Houses custom exception classes for handling export-specific errors and validation failures.&#10;&#10;### utils/&#10;Utility classes that provide supporting functionality:&#10;- API connectivity&#10;- Data conversion&#10;- Input validation&#10;- Object creation&#10;&#10;## Key Features&#10;- Google Calendar API integration&#10;- iCal format export (.ics files)&#10;- Input validation and error handling&#10;- Modular, extensible design&#10;- Gradle build automation" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/EventConverter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/EventConverter.java" />
              <option name="originalContent" value="import com.google.api.client.util.DateTime;&#10;import com.google.api.services.calendar.model.Event;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneId;&#10;&#10;public class EventConverter {&#10;&#10;    public MyEvent convert(Event googleEvent) {&#10;        String uid = googleEvent.getId();&#10;        String summary = googleEvent.getSummary();&#10;        String description = googleEvent.getDescription();&#10;        String location = googleEvent.getLocation();&#10;        String organizer = googleEvent.getOrganizer() != null ? googleEvent.getOrganizer().getEmail() : null;&#10;        java.util.List&lt;String&gt; attendees = new java.util.ArrayList&lt;&gt;();&#10;        if (googleEvent.getAttendees() != null) {&#10;            for (Event.Attendee attendee : googleEvent.getAttendees()) {&#10;                attendees.add(attendee.getEmail());&#10;            }&#10;        }&#10;&#10;        DateTime startTime = googleEvent.getStart().getDateTime();&#10;        DateTime endTime = googleEvent.getEnd().getDateTime();&#10;        if (startTime == null) {&#10;            startTime = googleEvent.getStart().getDate();&#10;        }&#10;        if (endTime == null) {&#10;            endTime = googleEvent.getEnd().getDate();&#10;        }&#10;        LocalDateTime start = startTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();&#10;        LocalDateTime end = endTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();&#10;&#10;        return new MyEvent(uid, summary, description, location, start, end, organizer, attendees);&#10;    }&#10;}" />
              <option name="updatedContent" value="import com.google.api.services.calendar.model.Event;&#10;import com.google.api.services.calendar.model.EventAttendee;&#10;import com.google.api.client.util.DateTime;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneId;&#10;import java.util.Date;&#10;&#10;public class EventConverter {&#10;&#10;    public MyEvent convert(Event googleEvent) {&#10;        String uid = googleEvent.getId();&#10;        String summary = googleEvent.getSummary();&#10;        String description = googleEvent.getDescription();&#10;        String location = googleEvent.getLocation();&#10;        String organizer = googleEvent.getOrganizer() != null ? googleEvent.getOrganizer().getEmail() : null;&#10;        java.util.List&lt;String&gt; attendees = new java.util.ArrayList&lt;&gt;();&#10;        if (googleEvent.getAttendees() != null) {&#10;            for (EventAttendee attendee : googleEvent.getAttendees()) {&#10;                attendees.add(attendee.getEmail());&#10;            }&#10;        }&#10;&#10;        DateTime startTime = googleEvent.getStart().getDateTime();&#10;        DateTime endTime = googleEvent.getEnd().getDateTime();&#10;        if (startTime == null) {&#10;            startTime = googleEvent.getStart().getDate();&#10;        }&#10;        if (endTime == null) {&#10;            endTime = googleEvent.getEnd().getDate();&#10;        }&#10;        LocalDateTime start = LocalDateTime.ofInstant(new Date(startTime.getValue()).toInstant(), ZoneId.systemDefault());&#10;        LocalDateTime end = LocalDateTime.ofInstant(new Date(endTime.getValue()).toInstant(), ZoneId.systemDefault());&#10;&#10;        return new MyEvent(uid, summary, description, location, start, end, organizer, attendees);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/MyEvent.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/MyEvent.java" />
              <option name="originalContent" value="public class MyEvent {&#10;    private String uid;&#10;    private String summary;&#10;    private String description;&#10;    private String location;&#10;    private java.time.LocalDateTime start;&#10;    private java.time.LocalDateTime end;&#10;    private String organizer;&#10;    private java.util.List&lt;String&gt; attendees;&#10;&#10;    public MyEvent(String uid, String summary, String description, String location, java.time.LocalDateTime start, java.time.LocalDateTime end, String organizer, java.util.List&lt;String&gt; attendees) {&#10;        this.uid = uid;&#10;        this.summary = summary;&#10;        this.description = description;&#10;        this.location = location;&#10;        this.start = start;&#10;        this.end = end;&#10;        this.organizer = organizer;&#10;        this.attendees = attendees;&#10;    }&#10;&#10;    public MyEvent() {&#10;        this.attendees = new java.util.ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Create iCal format string for the event&#10;    public StringBuilder toICalString(StringBuilder sb) {&#10;        sb.append(&quot;BEGIN:VEVENT\n&quot;);&#10;        sb.append(&quot;UID:&quot;).append(uid).append(&quot;\n&quot;);&#10;        sb.append(&quot;SUMMARY:&quot;).append(summary).append(&quot;\n&quot;);&#10;        sb.append(&quot;DESCRIPTION:&quot;).append(description).append(&quot;\n&quot;);&#10;        sb.append(&quot;LOCATION:&quot;).append(location).append(&quot;\n&quot;);&#10;        sb.append(&quot;DTSTART:&quot;).append(start.format(java.time.format.DateTimeFormatter.ofPattern(&quot;yyyyMMdd'T'HHmmss&quot;))).append(&quot;\n&quot;);&#10;        sb.append(&quot;DTEND:&quot;).append(end.format(java.time.format.DateTimeFormatter.ofPattern(&quot;yyyyMMdd'T'HHmmss&quot;))).append(&quot;\n&quot;);&#10;        sb.append(&quot;ORGANIZER:&quot;).append(organizer).append(&quot;\n&quot;);&#10;        for (String attendee : attendees) {&#10;            sb.append(&quot;ATTENDEE:&quot;).append(attendee).append(&quot;\n&quot;);&#10;        }&#10;        sb.append(&quot;END:VEVENT\n&quot;);&#10;        return sb;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getUid() { return uid; }&#10;    public void setUid(String uid) { this.uid = uid; }&#10;    public String getSummary() { return summary; }&#10;    public void setSummary(String summary) { this.summary = summary; }&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public String getLocation() { return location; }&#10;    public void setLocation(String location) { this.location = location; }&#10;    public java.time.LocalDateTime getStart() { return start; }&#10;    public void setStart(java.time.LocalDateTime start) { this.start = start; }&#10;    public java.time.LocalDateTime getEnd() { return end; }&#10;    public void setEnd(java.time.LocalDateTime end) { this.end = end; }&#10;    public String getOrganizer() { return organizer; }&#10;    public void setOrganizer(String organizer) { this.organizer = organizer; }&#10;    public java.util.List&lt;String&gt; getAttendees() { return attendees; }&#10;    public void setAttendees(java.util.List&lt;String&gt; attendees) { this.attendees = attendees; }&#10;}&#10;" />
              <option name="updatedContent" value="public class MyEvent {&#10;    private String uid;&#10;    private String summary;&#10;    private String description;&#10;    private String location;&#10;    private java.time.LocalDateTime start;&#10;    private java.time.LocalDateTime end;&#10;    private String organizer;&#10;    private java.util.List&lt;String&gt; attendees;&#10;&#10;    public MyEvent(String uid, String summary, String description, String location, java.time.LocalDateTime start, java.time.LocalDateTime end, String organizer, java.util.List&lt;String&gt; attendees) {&#10;        this.uid = uid;&#10;        this.summary = summary;&#10;        this.description = description;&#10;        this.location = location;&#10;        this.start = start;&#10;        this.end = end;&#10;        this.organizer = organizer;&#10;        this.attendees = attendees;&#10;    }&#10;&#10;    public MyEvent() {&#10;        this.attendees = new java.util.ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Modular iCal field formatting&#10;    private String formatUid() {&#10;        return &quot;UID:&quot; + uid + &quot;\n&quot;;&#10;    }&#10;    private String formatSummary() {&#10;        return &quot;SUMMARY:&quot; + summary + &quot;\n&quot;;&#10;    }&#10;    private String formatDescription() {&#10;        return &quot;DESCRIPTION:&quot; + description + &quot;\n&quot;;&#10;    }&#10;    private String formatLocation() {&#10;        return &quot;LOCATION:&quot; + location + &quot;\n&quot;;&#10;    }&#10;    private String formatStart() {&#10;        return &quot;DTSTART:&quot; + start.format(java.time.format.DateTimeFormatter.ofPattern(&quot;yyyyMMdd'T'HHmmss&quot;)) + &quot;\n&quot;;&#10;    }&#10;    private String formatEnd() {&#10;        return &quot;DTEND:&quot; + end.format(java.time.format.DateTimeFormatter.ofPattern(&quot;yyyyMMdd'T'HHmmss&quot;)) + &quot;\n&quot;;&#10;    }&#10;    private String formatOrganizer() {&#10;        return &quot;ORGANIZER:&quot; + organizer + &quot;\n&quot;;&#10;    }&#10;    private String formatAttendees() {&#10;        StringBuilder sb = new StringBuilder();&#10;        for (String attendee : attendees) {&#10;            sb.append(&quot;ATTENDEE:&quot;).append(attendee).append(&quot;\n&quot;);&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    // Create iCal format string for the event&#10;    public StringBuilder toICalString(StringBuilder sb) {&#10;        sb.append(&quot;BEGIN:VEVENT\n&quot;);&#10;        sb.append(formatUid());&#10;        sb.append(formatSummary());&#10;        sb.append(formatDescription());&#10;        sb.append(formatLocation());&#10;        sb.append(formatStart());&#10;        sb.append(formatEnd());&#10;        sb.append(formatOrganizer());&#10;        sb.append(formatAttendees());&#10;        sb.append(&quot;END:VEVENT\n&quot;);&#10;        return sb;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getUid() { return uid; }&#10;    public void setUid(String uid) { this.uid = uid; }&#10;    public String getSummary() { return summary; }&#10;    public void setSummary(String summary) { this.summary = summary; }&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public String getLocation() { return location; }&#10;    public void setLocation(String location) { this.location = location; }&#10;    public java.time.LocalDateTime getStart() { return start; }&#10;    public void setStart(java.time.LocalDateTime start) { this.start = start; }&#10;    public java.time.LocalDateTime getEnd() { return end; }&#10;    public void setEnd(java.time.LocalDateTime end) { this.end = end; }&#10;    public String getOrganizer() { return organizer; }&#10;    public void setOrganizer(String organizer) { this.organizer = organizer; }&#10;    public java.util.List&lt;String&gt; getAttendees() { return attendees; }&#10;    public void setAttendees(java.util.List&lt;String&gt; attendees) { this.attendees = attendees; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ui/controller/Controller.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ui/controller/Controller.java" />
              <option name="originalContent" value="package ui.controller;&#10;&#10;import ui.view.StartView;&#10;import utils.CalendarApiConnector;&#10;&#10;import java.io.IOException;&#10;import java.security.GeneralSecurityException;&#10;import java.util.Calendar;&#10;&#10;public class Controller {&#10;    private StartView startView;&#10;    private CalendarApiConnector apiConnector;&#10;&#10;    private static Controller instance;&#10;&#10;    /**&#10;     * Private constructor for the Controller class.&#10;     * Initializes the StartView and sets up the API connector.&#10;     */&#10;    private Controller() {&#10;        // Set look and feel&#10;        try {&#10;            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());&#10;        } catch (Exception e) {&#10;            // Use default look and feel&#10;            System.out.println(&quot;Using default view: Failed to set system look and feel: &quot; + e.getMessage());&#10;        }&#10;        // Initialize the StartView&#10;        // TODO: Implement the logic that the start view should only show if the user is not logged in&#10;        this.startView = new StartView(this);&#10;    }&#10;&#10;    /**&#10;     * Singleton pattern to ensure only one instance of Controller exists.&#10;     *&#10;     * @return The single instance of Controller.&#10;     */&#10;    public static Controller getInstance() {&#10;        if (instance == null) {&#10;            instance = new Controller();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void startLoginProcess() {&#10;        try {&#10;            startView.showLoginPrompt(CalendarApiConnector.getLoginUrl());&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        try {&#10;            apiConnector = CalendarApiConnector.getInstance();&#10;            // This is called when the OAuth flow completes successfully&#10;            startView.hideView();&#10;            // TODO: Proceed to the main application view or dashboard&#10;        } catch (IOException | GeneralSecurityException e) {&#10;            startView.showErrorDialog(&quot;Error during login process: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error during login process: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void clearCache() {&#10;        // Clear the cache in the CalendarApiConnector&#10;        try {&#10;            CalendarApiConnector.clearCredentials();&#10;            startView.showClearCacheSuccess();&#10;        } catch (IOException e) {&#10;            startView.showErrorDialog(&quot;Failed to clear cache: &quot; + e.getMessage());&#10;            System.err.println(&quot;Failed to clear cache: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package ui.controller;&#10;&#10;import ui.view.StartView;&#10;import utils.CalendarApiConnector;&#10;&#10;import java.io.IOException;&#10;import java.security.GeneralSecurityException;&#10;import java.util.Calendar;&#10;import javax.swing.SwingUtilities;&#10;&#10;public class Controller {&#10;    private StartView startView;&#10;    private CalendarApiConnector apiConnector;&#10;&#10;    private static Controller instance;&#10;&#10;    /**&#10;     * Private constructor for the Controller class.&#10;     * Initializes the StartView and sets up the API connector.&#10;     */&#10;    private Controller() {&#10;        // Set look and feel&#10;        try {&#10;            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());&#10;        } catch (Exception e) {&#10;            // Use default look and feel&#10;            System.out.println(&quot;Using default view: Failed to set system look and feel: &quot; + e.getMessage());&#10;        }&#10;        // Initialize the StartView&#10;        // TODO: Implement the logic that the start view should only show if the user is not logged in&#10;        this.startView = new StartView(this);&#10;    }&#10;&#10;    /**&#10;     * Singleton pattern to ensure only one instance of Controller exists.&#10;     *&#10;     * @return The single instance of Controller.&#10;     */&#10;    public static Controller getInstance() {&#10;        if (instance == null) {&#10;            instance = new Controller();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void startLoginProcess() {&#10;        try {&#10;            startView.showLoginPrompt(CalendarApiConnector.getLoginUrl());&#10;            &#10;            // Start OAuth flow in a separate thread after a small delay to allow UI to render&#10;            SwingUtilities.invokeLater(() -&gt; {&#10;                new Thread(() -&gt; {&#10;                    try {&#10;                        // Small delay to ensure the login dialog is fully rendered&#10;                        Thread.sleep(500);&#10;                        &#10;                        apiConnector = CalendarApiConnector.getInstance();&#10;                        // This is called when the OAuth flow completes successfully&#10;                        SwingUtilities.invokeLater(() -&gt; {&#10;                            startView.hideView();&#10;                            // TODO: Proceed to the main application view or dashboard&#10;                        });&#10;                    } catch (IOException | GeneralSecurityException e) {&#10;                        SwingUtilities.invokeLater(() -&gt; {&#10;                            startView.showErrorDialog(&quot;Error during login process: &quot; + e.getMessage());&#10;                        });&#10;                        System.err.println(&quot;Error during login process: &quot; + e.getMessage());&#10;                    } catch (InterruptedException e) {&#10;                        Thread.currentThread().interrupt();&#10;                        System.err.println(&quot;Login process was interrupted: &quot; + e.getMessage());&#10;                    }&#10;                }).start();&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void clearCache() {&#10;        // Clear the cache in the CalendarApiConnector&#10;        try {&#10;            CalendarApiConnector.clearCredentials();&#10;            startView.showClearCacheSuccess();&#10;        } catch (IOException e) {&#10;            startView.showErrorDialog(&quot;Failed to clear cache: &quot; + e.getMessage());&#10;            System.err.println(&quot;Failed to clear cache: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ui/main/View.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ui/main/View.java" />
              <option name="originalContent" value="/**&#10; * View.java&#10; * This class represents the main user interface for the G2iCal application.&#10; * It handles the display of calendars, event data, and user interactions.&#10; * The view is designed to be responsive and user-friendly.&#10; */&#10;&#10;package ui.main;&#10;&#10;import calendar.CalendarEvent;&#10;import com.toedter.calendar.JDateChooser;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.Border;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;&#10;public class View extends JFrame {&#10;    private final Controller controller; // Reference to the controller&#10;&#10;    // UI components that need to be accessed in multiple methods&#10;    private JComboBox&lt;String&gt; calendarDropdown;&#10;    private JDateChooser startDateChooser;&#10;    private JDateChooser endDateChooser;&#10;    private JButton loadDataButton;&#10;    private DefaultTableModel tableModel;&#10;    private JButton exportButton;&#10;    private JLabel statusLabel;&#10;    private JMenuItem saveMenuItem;&#10;&#10;    //Style constants&#10;    private static final Color LIGHT_BLUE = new Color(135, 206, 250);&#10;&#10;    /**&#10;     * Constructor for the main view.&#10;     * Initializes the user interface and sets up the layout.&#10;     * Package-private to restrict access to the controller.&#10;     *&#10;     * @param controller The controller that handles user interactions.&#10;     */&#10;    View(Controller controller) {&#10;        this.controller = controller;&#10;        initializeUI();&#10;    }&#10;&#10;    /**&#10;     * Initializes the user interface components and layout.&#10;     */&#10;    private void initializeUI() {&#10;        // Program name and basic settings for the JFrame&#10;        setTitle(&quot;G2iCal&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setMinimumSize(new Dimension(480, 300)); // Set minimum size for responsiveness&#10;        setPreferredSize(new Dimension(900, 700)); // default size&#10;        setLocationRelativeTo(null);&#10;&#10;        // Set Menu Bar&#10;        createMenuBar();&#10;&#10;        // Create main content panel&#10;        createMainContent();&#10;&#10;        pack(); // Size to preferred size&#10;        setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Creates the menu bar for the main view and adds it to the JFrame.&#10;     */&#10;    private void createMenuBar() {&#10;        // Detect operating system&#10;        boolean isMac = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;mac&quot;);&#10;&#10;        // Create and set up the menu bar&#10;        JMenuBar menuBar = new JMenuBar();&#10;&#10;        // Create File menu&#10;        JMenu fileMenu = new JMenu(&quot;File&quot;);&#10;        saveMenuItem = new JMenuItem(&quot;Save&quot;);&#10;        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta S&quot; : &quot;ctrl S&quot;));&#10;        saveMenuItem.setEnabled(false);&#10;        saveMenuItem.addActionListener(new ExportActionListener() {&#10;        });&#10;        JMenuItem newItem = new JMenuItem(&quot;New&quot;);&#10;        newItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta N&quot; : &quot;ctrl N&quot;));&#10;        newItem.addActionListener(e -&gt; controller.reset());&#10;        JMenuItem exitItem = new JMenuItem(&quot;Exit to Start Screen&quot;);&#10;        exitItem.addActionListener(e -&gt; controller.exitToStartScreen());&#10;        if (!isMac) {&#10;            JMenuItem quitItem = new JMenuItem(&quot;Quit&quot;);&#10;            quitItem.setAccelerator(KeyStroke.getKeyStroke(&quot;ctrl Q&quot;));&#10;            quitItem.addActionListener(e -&gt; System.exit(0));&#10;        }&#10;&#10;        fileMenu.add(saveMenuItem);&#10;        fileMenu.add(newItem);&#10;        fileMenu.addSeparator();&#10;        fileMenu.add(exitItem);&#10;        if (!isMac) fileMenu.add(new JMenuItem(&quot;Quit&quot;));&#10;&#10;&#10;        // Account menu&#10;        JMenu accountMenu = new JMenu(&quot;Account&quot;);&#10;        JMenuItem accountInfoItem = new JMenuItem(&quot;Logged in as: &quot; + controller.getUserName());&#10;        accountInfoItem.setEnabled(false);&#10;        JMenuItem logoutItem = new JMenuItem(&quot;Logout&quot;);&#10;        logoutItem.addActionListener(e -&gt; controller.logout());&#10;&#10;        accountMenu.add(accountInfoItem);&#10;        accountMenu.addSeparator();&#10;        accountMenu.add(logoutItem);&#10;&#10;        // Create Settings menu&#10;        JMenu settingsMenu = new JMenu(&quot;Settings&quot;);&#10;        JMenuItem settingsItem = new JMenuItem(&quot;Application Settings&quot;);&#10;        settingsItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta COMMA&quot; : &quot;ctrl COMMA&quot;));&#10;        settingsItem.addActionListener(e -&gt; showSettingsDialog());&#10;&#10;        settingsMenu.add(settingsItem);&#10;&#10;        // Help menu for non-Mac systems (on macOS, the Help menu is handled by setupMacOSMenus)&#10;        JMenu helpMenu = null;&#10;        if (!isMac) {&#10;            helpMenu = new JMenu(&quot;Help&quot;);&#10;            JMenuItem aboutItem = new JMenuItem(&quot;About G2iCal&quot;);&#10;            aboutItem.addActionListener(e -&gt; showAboutDialog());&#10;            helpMenu.add(aboutItem);&#10;        }&#10;&#10;        // Add menus to menu bar&#10;        menuBar.add(fileMenu);&#10;        menuBar.add(accountMenu);&#10;        menuBar.add(settingsMenu);&#10;        if (!isMac) menuBar.add(helpMenu);&#10;&#10;        // Handle macOS-specific menus&#10;        if (isMac &amp;&amp; Desktop.isDesktopSupported()) {&#10;            Desktop desktop = Desktop.getDesktop();&#10;            // Handle About menu&#10;            if (desktop.isSupported(Desktop.Action.APP_ABOUT)) {&#10;                desktop.setAboutHandler(e -&gt; showAboutDialog());&#10;            }&#10;            // Handle Quit menu&#10;            if (desktop.isSupported(Desktop.Action.APP_QUIT_HANDLER)) {&#10;                desktop.setQuitHandler((e, response) -&gt; {&#10;                    System.exit(0);&#10;                    response.performQuit();&#10;                });&#10;            }&#10;        }&#10;&#10;        setJMenuBar(menuBar);&#10;    }&#10;&#10;    /**&#10;     * Creates the main content panel with all UI components&#10;     */&#10;    private void createMainContent() {&#10;        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));&#10;&#10;        // Top panel - Form with calendar selection and date range&#10;        JPanel formPanel = createFormPanel();&#10;        mainPanel.add(formPanel, BorderLayout.NORTH);&#10;&#10;        // Center panel - Event table&#10;        JPanel tablePanel = createEventTablePanel();&#10;        mainPanel.add(tablePanel, BorderLayout.CENTER);&#10;&#10;        // Bottom panel - Export and status&#10;        JPanel bottomPanel = createExportPanel();&#10;        mainPanel.add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        add(mainPanel);&#10;    }&#10;&#10;    private JPanel createFormPanel() {&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        formPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 10, 0));&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;&#10;        // Form label&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        gbc.gridwidth = 5;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;        JLabel calendarLabel = new JLabel(&quot;Select a calendar and date range for the export:&quot;);&#10;        formPanel.add(calendarLabel, gbc);&#10;&#10;&#10;        // Calendar dropdown&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        gbc.gridwidth = 5;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        calendarDropdown = new JComboBox&lt;&gt;();&#10;        calendarDropdown.setSize(new Dimension(400, 35));&#10;        formPanel.add(calendarDropdown, gbc);&#10;        // Date range controls&#10;        gbc.gridy = 2;&#10;        gbc.gridwidth = 1;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;&#10;        gbc.gridx = 0;&#10;        JLabel fromLabel = new JLabel(&quot;Start:&quot;);&#10;        formPanel.add(fromLabel, gbc);&#10;&#10;        gbc.gridx = 1;&#10;        startDateChooser = createStyledDateChooser();&#10;        formPanel.add(startDateChooser, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        JLabel toLabel = new JLabel(&quot;End:&quot;);&#10;        formPanel.add(toLabel, gbc);&#10;&#10;        gbc.gridx = 3;&#10;        endDateChooser = createStyledDateChooser();&#10;        formPanel.add(endDateChooser, gbc);&#10;&#10;        // Load Data button&#10;        gbc.gridx = 4;&#10;        gbc.anchor = GridBagConstraints.EAST;&#10;        gbc.weightx = 1.0;&#10;        loadDataButton = new JButton(&quot;Load Data&quot;);&#10;        loadDataButton.setBackground(LIGHT_BLUE);&#10;        loadDataButton.setSize(new Dimension(100, 35));&#10;        loadDataButton.addActionListener(new LoadDataActionListener());&#10;        formPanel.add(loadDataButton, gbc);&#10;&#10;        // Set default dates (from 30 days ago to today)&#10;        Calendar cal = Calendar.getInstance();&#10;        endDateChooser.setDate(cal.getTime());&#10;        cal.add(Calendar.DAY_OF_MONTH, -30);&#10;        startDateChooser.setDate(cal.getTime());&#10;&#10;        return formPanel;&#10;    }&#10;&#10;    private JDateChooser createStyledDateChooser() {&#10;        JDateChooser dateChooser = new JDateChooser();&#10;        dateChooser.setDateFormatString(&quot;yyyy-MM-dd&quot;);&#10;        dateChooser.setPreferredSize(new Dimension(120, 25));&#10;&#10;        // Style the date chooser to have connected appearance with clean rounded corners&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            // Get the text field component&#10;            JTextField textField = ((JTextField) dateChooser.getDateEditor().getUiComponent());&#10;&#10;            // Find the calendar button by iterating through components&#10;            JButton calendarButton = null;&#10;            for (Component comp : dateChooser.getComponents()) {&#10;                if (comp instanceof JButton) {&#10;                    calendarButton = (JButton) comp;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (calendarButton != null) {&#10;                // Create clean rounded borders like the Load Data button&#10;                textField.setBorder(new CleanRoundedBorder(8, true, false)); // Left side rounded&#10;                calendarButton.setBorder(new CleanRoundedBorder(8, false, true)); // Right side rounded&#10;&#10;                // Style the button to match&#10;                calendarButton.setContentAreaFilled(false);&#10;                calendarButton.setFocusPainted(false);&#10;                calendarButton.setOpaque(true);&#10;                calendarButton.setBackground(Color.WHITE);&#10;&#10;                // Style the text field&#10;                textField.setOpaque(true);&#10;                textField.setBackground(Color.WHITE);&#10;            }&#10;        });&#10;&#10;        return dateChooser;&#10;    }&#10;&#10;    private JPanel createEventTablePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;&#10;        // Create table model&#10;        String[] columnNames = {&quot;Name&quot;, &quot;Start&quot;, &quot;End&quot;, &quot;Location&quot;, &quot;Description&quot;, &quot;...&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false; // Make table read-only&#10;            }&#10;        };&#10;&#10;        JTable eventTable = new JTable(tableModel);&#10;        eventTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;        eventTable.setFillsViewportHeight(true); // Make table fill available space&#10;        eventTable.setRowSelectionAllowed(false); // Disable row selection&#10;        eventTable.setColumnSelectionAllowed(false); // Disable column selection&#10;&#10;        // Set responsive column widths (proportional rather than fixed)&#10;        eventTable.getColumnModel().getColumn(0).setPreferredWidth(200); // Name&#10;        eventTable.getColumnModel().getColumn(1).setPreferredWidth(120); // Start&#10;        eventTable.getColumnModel().getColumn(2).setPreferredWidth(120); // End&#10;        eventTable.getColumnModel().getColumn(3).setPreferredWidth(140); // Location&#10;        eventTable.getColumnModel().getColumn(4).setPreferredWidth(300); // Description&#10;        eventTable.getColumnModel().getColumn(5).setWidth(10); // More column&#10;&#10;        JScrollPane scrollPane = new JScrollPane(eventTable);&#10;        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);&#10;        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);&#10;        // Remove fixed size to make it truly responsive&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createExportPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout(10, 5));&#10;&#10;        // Status label on the left - make it responsive&#10;        statusLabel = new JLabel(&quot;Select a calendar and date range, then click 'Load Data' to begin&quot;);&#10;        statusLabel.setFont(statusLabel.getFont().deriveFont(Font.ITALIC));&#10;        // Wrap long text if needed&#10;        statusLabel.setPreferredSize(new Dimension(0, 20)); // Height fixed, width flexible&#10;        panel.add(statusLabel, BorderLayout.CENTER);&#10;&#10;        // Export button on the right&#10;        exportButton = new JButton(&quot;Export&quot;);&#10;        exportButton.setBackground(LIGHT_BLUE);&#10;        exportButton.setMinimumSize(new Dimension(80, 35));&#10;        exportButton.setPreferredSize(new Dimension(100, 35));&#10;        exportButton.addActionListener(new ExportActionListener());&#10;        exportButton.setEnabled(false); // Initially disabled until data is loaded&#10;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));&#10;        buttonPanel.add(exportButton);&#10;        panel.add(buttonPanel, BorderLayout.EAST);&#10;&#10;        return panel;&#10;    }&#10;&#10;    /**&#10;     * Resets the view to its initial state.&#10;     * Clears the table, resets status label, and disables export button.&#10;     * Package-private to restrict access to the controller.&#10;     */&#10;    void reset() {&#10;        tableModel.setRowCount(0); // Clear existing data from the table&#10;        statusLabel.setText(&quot;Select a calendar and date range, then click 'Load Data' to begin&quot;); // Reset status label&#10;        setExportButtonEnabled(false); // Disable export button&#10;    }&#10;&#10;    /**&#10;     * Action listener for the Load Data button&#10;     * Validates inputs and calls the controller to load calendar events.&#10;     * Gets the selected values from the dropdown and date pickers and validates them.&#10;     * If validation fails, shows an error dialog.&#10;     * If validation passes, it calls the controller to load events.&#10;     */&#10;    private class LoadDataActionListener implements ActionListener {&#10;        @Override&#10;        public void actionPerformed(ActionEvent e) {&#10;            int selectedIndex = calendarDropdown.getSelectedIndex();&#10;            if (selectedIndex == -1) {&#10;                showErrorDialog(&quot;Please select a calendar.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Get the calendar ID using the selected index&#10;            String[] calendarIds = (String[]) calendarDropdown.getClientProperty(&quot;calendarIds&quot;);&#10;            String selectedCalendarId = calendarIds[selectedIndex];&#10;&#10;            Date startDate = startDateChooser.getDate();&#10;            Date endDate = endDateChooser.getDate();&#10;&#10;            // Validate inputs&#10;            if (selectedCalendarId == null || selectedCalendarId.isEmpty()) {&#10;                showErrorDialog(&quot;Please select a calendar.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (startDate.after(endDate)) {&#10;                showErrorDialog(&quot;Start date must be before or equal to end date.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Check if date range is too large (more than 1 year)&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(startDate);&#10;            cal.add(Calendar.YEAR, 1);&#10;            if (endDate.after(cal.getTime())) {&#10;                showErrorDialog(&quot;Date range cannot exceed 1 year.&quot;);&#10;                return;&#10;            }&#10;&#10;            statusLabel.setText(&quot;Loading data...&quot;);&#10;            loadDataButton.setEnabled(false);&#10;&#10;            // Format dates for controller&#10;            SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;            String fromDateStr = formatter.format(startDate);&#10;            String toDateStr = formatter.format(endDate);&#10;&#10;            // Call controller method to load events&#10;            controller.loadCalendarEvents(selectedCalendarId, fromDateStr, toDateStr);&#10;            loadDataButton.setEnabled(true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Action listener for the Export button&#10;     */&#10;    private class ExportActionListener implements ActionListener {&#10;        @Override&#10;        public void actionPerformed(ActionEvent e) {&#10;            statusLabel.setText(&quot;Exporting...&quot;);&#10;            exportButton.setEnabled(false);&#10;&#10;            // Call controller method to export events&#10;            controller.exportEvents();&#10;            exportButton.setEnabled(true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the calendar dropdown with available calendars&#10;     *&#10;     * @param calendarIds   Array of calendar IDs&#10;     * @param calendarNames Array of calendar names&#10;     */&#10;    public void updateCalendarList(String[] calendarIds, String[] calendarNames) {&#10;        calendarDropdown.removeAllItems();&#10;&#10;        // Store calendar IDs for later retrieval&#10;        calendarDropdown.putClientProperty(&quot;calendarIds&quot;, calendarIds);&#10;&#10;        // Add calendar names to dropdown&#10;        for (String name : calendarNames) {&#10;            calendarDropdown.addItem(name);&#10;        }&#10;&#10;        // Select first item if available&#10;        if (calendarNames.length &gt; 0) {&#10;            calendarDropdown.setSelectedIndex(0);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the event table with loaded events&#10;     *&#10;     * @param events 2D array of event data&#10;     */&#10;    public void updateEventTable(CalendarEvent[][] events) {&#10;        tableModel.setRowCount(0); // Clear existing data&#10;        for (CalendarEvent[] event : events) {&#10;            tableModel.addRow(event);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sets the status message&#10;     *&#10;     * @param message The status message to display&#10;     */&#10;    public void setStatusMessage(String message) {&#10;        statusLabel.setText(message);&#10;    }&#10;&#10;    /**&#10;     * Enables or disables the export button and save menu item&#10;     *&#10;     * @param enabled true to enable, false to disable&#10;     */&#10;    public void setExportButtonEnabled(boolean enabled) {&#10;        exportButton.setEnabled(enabled);&#10;        saveMenuItem.setEnabled(enabled);&#10;    }&#10;&#10;    /* Dialogs */&#10;&#10;    /**&#10;     * Shows the About dialog with application information.&#10;     * This method is called when the user selects &quot;About G2iCal&quot; from the Help menu.&#10;     */&#10;    private void showAboutDialog() {&#10;        String aboutMessage = &quot;G2iCal\n&quot; + &quot;Version: Beta 1.0\n&quot; + &quot;G2iCal is a simple application for exporting your google-calendar to a ical file.\n\n&quot; + &quot;© 2025 Dominik Mitzel\n&quot; + &quot;MN: 6633800\n&quot;;&#10;&#10;        JOptionPane.showOptionDialog(this, aboutMessage, &quot;About G2iCal&quot;, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, new String[]{}, // Empty array = no buttons&#10;                null);&#10;    }&#10;&#10;    /**&#10;     * Show Settings dialog.&#10;     * In the settings dialog, the user can change the application settings.&#10;     */&#10;    private void showSettingsDialog() {&#10;        // Get current file name and file path from the controller&#10;        String fileName = controller.getFileName();&#10;        String filePath = controller.getFilePath();&#10;&#10;        // Create the settings dialog&#10;        JDialog settingsDialog = new JDialog(this, &quot;Application Settings&quot;, true);&#10;        settingsDialog.setSize(550, 250);&#10;        settingsDialog.setResizable(false);&#10;        settingsDialog.setLocationRelativeTo(this);&#10;        settingsDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);&#10;&#10;        // Main panel with BorderLayout&#10;        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));&#10;&#10;        // Form panel with GridBagLayout for better control&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        // Export file name&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 0;&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        formPanel.add(new JLabel(&quot;Export File Name:&quot;), gbc);&#10;&#10;        gbc.gridx = 1;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        JTextField fileNameField = new JTextField(fileName, 20);&#10;        formPanel.add(fileNameField, gbc);&#10;&#10;        // Export file path&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 1;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;        formPanel.add(new JLabel(&quot;Export Location:&quot;), gbc);&#10;&#10;        gbc.gridx = 1;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        JPanel locationPanel = new JPanel(new BorderLayout(5, 0));&#10;        JTextField locationField = new JTextField(filePath, 20);&#10;        locationField.setEditable(false);&#10;        JButton browseButton = new JButton(&quot;Browse...&quot;);&#10;&#10;        browseButton.addActionListener(e -&gt; {&#10;            JFileChooser fileChooser = new JFileChooser();&#10;            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#10;            fileChooser.setDialogTitle(&quot;Select Export Directory&quot;);&#10;            fileChooser.setCurrentDirectory(new java.io.File(locationField.getText()));&#10;&#10;            if (fileChooser.showOpenDialog(settingsDialog) == JFileChooser.APPROVE_OPTION) {&#10;                locationField.setText(fileChooser.getSelectedFile().getAbsolutePath());&#10;            }&#10;        });&#10;&#10;        locationPanel.add(locationField, BorderLayout.CENTER);&#10;        locationPanel.add(browseButton, BorderLayout.EAST);&#10;        formPanel.add(locationPanel, gbc);&#10;&#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;        JButton resetButton = new JButton(&quot;Reset&quot;);&#10;        JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;        JButton saveButton = new JButton(&quot;Save&quot;);&#10;        saveButton.setBackground(LIGHT_BLUE);&#10;&#10;        // Reset to defaults action&#10;        resetButton.addActionListener(e -&gt; {&#10;            int result = JOptionPane.showConfirmDialog(settingsDialog, &quot;Are you sure you want to reset all settings to defaults?&quot;, &quot;Reset Settings&quot;, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);&#10;&#10;            if (result == JOptionPane.YES_OPTION) {&#10;                fileNameField.setText(&quot;calendar_export.ics&quot;);&#10;                locationField.setText(System.getProperty(&quot;user.home&quot;) + java.io.File.separator + &quot;Downloads&quot;);&#10;            }&#10;        });&#10;&#10;        cancelButton.addActionListener(e -&gt; settingsDialog.dispose());&#10;&#10;        saveButton.addActionListener(e -&gt; {&#10;            String newFileName = fileNameField.getText().trim();&#10;            String newFilePath = locationField.getText().trim();&#10;&#10;            // Validate inputs&#10;            if (newFileName.isEmpty()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;File name cannot be empty.&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            if (newFilePath.isEmpty()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;Export location cannot be empty.&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Check if directory exists&#10;            java.io.File directory = new java.io.File(newFilePath);&#10;            if (!directory.exists() || !directory.isDirectory()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;The specified directory does not exist or is not accessible.&quot;, &quot;Invalid Directory&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Save the settings and close the dialog&#10;            controller.updateSettings(newFileName, newFilePath);&#10;            settingsDialog.dispose();&#10;        });&#10;&#10;        buttonPanel.add(resetButton);&#10;        buttonPanel.add(cancelButton);&#10;        buttonPanel.add(saveButton);&#10;&#10;        // Add panels to main panel&#10;        mainPanel.add(formPanel, BorderLayout.CENTER);&#10;        mainPanel.add(buttonPanel, BorderLayout.SOUTH);&#10;&#10;        settingsDialog.add(mainPanel);&#10;        settingsDialog.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Show error dialog with a message.&#10;     * It is package-private to restrict access to the package.&#10;     *&#10;     * @param message The error message to display.&#10;     */&#10;    void showErrorDialog(String message) {&#10;        JOptionPane.showMessageDialog(this, message, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;    }&#10;&#10;    private static class CleanRoundedBorder implements Border {&#10;        private final int radius;&#10;        private final boolean leftRounded;&#10;        private final boolean rightRounded;&#10;&#10;        public CleanRoundedBorder(int radius, boolean leftRounded, boolean rightRounded) {&#10;            this.radius = radius;&#10;            this.leftRounded = leftRounded;&#10;            this.rightRounded = rightRounded;&#10;        }&#10;&#10;        @Override&#10;        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {&#10;            Graphics2D g2d = (Graphics2D) g.create();&#10;            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;            g2d.setColor(new Color(160, 160, 160)); // Light gray border&#10;            g2d.setStroke(new BasicStroke(1.0f));&#10;&#10;            // Create the shape&#10;            Shape shape;&#10;            if (leftRounded &amp;&amp; !rightRounded) {&#10;                // Left rounded, right straight&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x, y, width + radius, height - 1, radius, radius);&#10;            } else if (!leftRounded &amp;&amp; rightRounded) {&#10;                // Right rounded, left straight&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x - radius, y, width + radius, height - 1, radius, radius);&#10;            } else {&#10;                // Fully rounded&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x, y, width - 1, height - 1, radius, radius);&#10;            }&#10;&#10;            g2d.draw(shape);&#10;            g2d.dispose();&#10;        }&#10;&#10;        @Override&#10;        public Insets getBorderInsets(Component c) {&#10;            return new Insets(2, 4, 2, 4);&#10;        }&#10;&#10;        @Override&#10;        public boolean isBorderOpaque() {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * View.java&#10; * This class represents the main user interface for the G2iCal application.&#10; * It handles the display of calendars, event data, and user interactions.&#10; * The view is designed to be responsive and user-friendly.&#10; */&#10;&#10;package ui.main;&#10;&#10;import calendar.CalendarEvent;&#10;import com.toedter.calendar.JDateChooser;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.Border;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;&#10;public class View extends JFrame {&#10;    private final Controller controller; // Reference to the controller&#10;&#10;    // UI components that need to be accessed in multiple methods&#10;    private JComboBox&lt;String&gt; calendarDropdown;&#10;    private JDateChooser startDateChooser;&#10;    private JDateChooser endDateChooser;&#10;    private JButton loadDataButton;&#10;    private DefaultTableModel tableModel;&#10;    private JButton exportButton;&#10;    private JLabel statusLabel;&#10;    private JMenuItem saveMenuItem;&#10;&#10;    //Style constants&#10;    private static final Color LIGHT_BLUE = new Color(135, 206, 250);&#10;&#10;    /**&#10;     * Constructor for the main view.&#10;     * Initializes the user interface and sets up the layout.&#10;     * Package-private to restrict access to the controller.&#10;     *&#10;     * @param controller The controller that handles user interactions.&#10;     */&#10;    View(Controller controller) {&#10;        this.controller = controller;&#10;        initializeUI();&#10;    }&#10;&#10;    /**&#10;     * Initializes the user interface components and layout.&#10;     */&#10;    private void initializeUI() {&#10;        // Program name and basic settings for the JFrame&#10;        setTitle(&quot;G2iCal&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setMinimumSize(new Dimension(480, 300)); // Set minimum size for responsiveness&#10;        setPreferredSize(new Dimension(900, 700)); // default size&#10;        setLocationRelativeTo(null);&#10;&#10;        // Set Menu Bar&#10;        createMenuBar();&#10;&#10;        // Create main content panel&#10;        createMainContent();&#10;&#10;        pack(); // Size to preferred size&#10;        setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Creates the menu bar for the main view and adds it to the JFrame.&#10;     */&#10;    private void createMenuBar() {&#10;        // Detect operating system&#10;        boolean isMac = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;mac&quot;);&#10;&#10;        // Create and set up the menu bar&#10;        JMenuBar menuBar = new JMenuBar();&#10;&#10;        // Create File menu&#10;        JMenu fileMenu = new JMenu(&quot;File&quot;);&#10;        saveMenuItem = new JMenuItem(&quot;Save&quot;);&#10;        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta S&quot; : &quot;ctrl S&quot;));&#10;        saveMenuItem.setEnabled(false);&#10;        saveMenuItem.addActionListener(new ExportActionListener() {&#10;        });&#10;        JMenuItem newItem = new JMenuItem(&quot;New&quot;);&#10;        newItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta N&quot; : &quot;ctrl N&quot;));&#10;        newItem.addActionListener(e -&gt; controller.reset());&#10;        JMenuItem exitItem = new JMenuItem(&quot;Exit to Start Screen&quot;);&#10;        exitItem.addActionListener(e -&gt; controller.exitToStartScreen());&#10;        if (!isMac) {&#10;            JMenuItem quitItem = new JMenuItem(&quot;Quit&quot;);&#10;            quitItem.setAccelerator(KeyStroke.getKeyStroke(&quot;ctrl Q&quot;));&#10;            quitItem.addActionListener(e -&gt; System.exit(0));&#10;        }&#10;&#10;        fileMenu.add(saveMenuItem);&#10;        fileMenu.add(newItem);&#10;        fileMenu.addSeparator();&#10;        fileMenu.add(exitItem);&#10;        if (!isMac) fileMenu.add(new JMenuItem(&quot;Quit&quot;));&#10;&#10;&#10;        // Account menu&#10;        JMenu accountMenu = new JMenu(&quot;Account&quot;);&#10;        JMenuItem accountInfoItem = new JMenuItem(&quot;Logged in as: &quot; + controller.getUserName());&#10;        accountInfoItem.setEnabled(false);&#10;        JMenuItem logoutItem = new JMenuItem(&quot;Logout&quot;);&#10;        logoutItem.addActionListener(e -&gt; controller.logout());&#10;&#10;        accountMenu.add(accountInfoItem);&#10;        accountMenu.addSeparator();&#10;        accountMenu.add(logoutItem);&#10;&#10;        // Create Settings menu&#10;        JMenu settingsMenu = new JMenu(&quot;Settings&quot;);&#10;        JMenuItem settingsItem = new JMenuItem(&quot;Application Settings&quot;);&#10;        settingsItem.setAccelerator(KeyStroke.getKeyStroke(isMac ? &quot;meta COMMA&quot; : &quot;ctrl COMMA&quot;));&#10;        settingsItem.addActionListener(e -&gt; showSettingsDialog());&#10;&#10;        settingsMenu.add(settingsItem);&#10;&#10;        // Help menu for non-Mac systems (on macOS, the Help menu is handled by setupMacOSMenus)&#10;        JMenu helpMenu = null;&#10;        if (!isMac) {&#10;            helpMenu = new JMenu(&quot;Help&quot;);&#10;            JMenuItem aboutItem = new JMenuItem(&quot;About G2iCal&quot;);&#10;            aboutItem.addActionListener(e -&gt; showAboutDialog());&#10;            helpMenu.add(aboutItem);&#10;        }&#10;&#10;        // Add menus to menu bar&#10;        menuBar.add(fileMenu);&#10;        menuBar.add(accountMenu);&#10;        menuBar.add(settingsMenu);&#10;        if (!isMac) menuBar.add(helpMenu);&#10;&#10;        // Handle macOS-specific menus&#10;        if (isMac &amp;&amp; Desktop.isDesktopSupported()) {&#10;            Desktop desktop = Desktop.getDesktop();&#10;            // Handle About menu&#10;            if (desktop.isSupported(Desktop.Action.APP_ABOUT)) {&#10;                desktop.setAboutHandler(e -&gt; showAboutDialog());&#10;            }&#10;            // Handle Quit menu&#10;            if (desktop.isSupported(Desktop.Action.APP_QUIT_HANDLER)) {&#10;                desktop.setQuitHandler((e, response) -&gt; {&#10;                    System.exit(0);&#10;                    response.performQuit();&#10;                });&#10;            }&#10;        }&#10;&#10;        setJMenuBar(menuBar);&#10;    }&#10;&#10;    /**&#10;     * Creates the main content panel with all UI components&#10;     */&#10;    private void createMainContent() {&#10;        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));&#10;&#10;        // Top panel - Form with calendar selection and date range&#10;        JPanel formPanel = createFormPanel();&#10;        mainPanel.add(formPanel, BorderLayout.NORTH);&#10;&#10;        // Center panel - Event table&#10;        JPanel tablePanel = createEventTablePanel();&#10;        mainPanel.add(tablePanel, BorderLayout.CENTER);&#10;&#10;        // Bottom panel - Export and status&#10;        JPanel bottomPanel = createExportPanel();&#10;        mainPanel.add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        add(mainPanel);&#10;    }&#10;&#10;    private JPanel createFormPanel() {&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        formPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 10, 0));&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;&#10;        // Form label&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        gbc.gridwidth = 5;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;        JLabel calendarLabel = new JLabel(&quot;Select a calendar and date range for the export:&quot;);&#10;        formPanel.add(calendarLabel, gbc);&#10;&#10;&#10;        // Calendar dropdown&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        gbc.gridwidth = 5;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        calendarDropdown = new JComboBox&lt;&gt;();&#10;        calendarDropdown.setSize(new Dimension(400, 35));&#10;        formPanel.add(calendarDropdown, gbc);&#10;        // Date range controls&#10;        gbc.gridy = 2;&#10;        gbc.gridwidth = 1;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;&#10;        gbc.gridx = 0;&#10;        JLabel fromLabel = new JLabel(&quot;Start:&quot;);&#10;        formPanel.add(fromLabel, gbc);&#10;&#10;        gbc.gridx = 1;&#10;        startDateChooser = createStyledDateChooser();&#10;        formPanel.add(startDateChooser, gbc);&#10;&#10;        gbc.gridx = 2;&#10;        JLabel toLabel = new JLabel(&quot;End:&quot;);&#10;        formPanel.add(toLabel, gbc);&#10;&#10;        gbc.gridx = 3;&#10;        endDateChooser = createStyledDateChooser();&#10;        formPanel.add(endDateChooser, gbc);&#10;&#10;        // Load Data button&#10;        gbc.gridx = 4;&#10;        gbc.anchor = GridBagConstraints.EAST;&#10;        gbc.weightx = 1.0;&#10;        loadDataButton = new JButton(&quot;Load Data&quot;);&#10;        loadDataButton.setBackground(LIGHT_BLUE);&#10;        loadDataButton.setSize(new Dimension(100, 35));&#10;        loadDataButton.addActionListener(new LoadDataActionListener());&#10;        formPanel.add(loadDataButton, gbc);&#10;&#10;        // Set default dates (from 30 days ago to today)&#10;        Calendar cal = Calendar.getInstance();&#10;        endDateChooser.setDate(cal.getTime());&#10;        cal.add(Calendar.DAY_OF_MONTH, -30);&#10;        startDateChooser.setDate(cal.getTime());&#10;&#10;        return formPanel;&#10;    }&#10;&#10;    private JDateChooser createStyledDateChooser() {&#10;        JDateChooser dateChooser = new JDateChooser();&#10;        dateChooser.setDateFormatString(&quot;yyyy-MM-dd&quot;);&#10;        dateChooser.setPreferredSize(new Dimension(120, 25));&#10;&#10;        // Style the date chooser to have connected appearance with clean rounded corners&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            // Get the text field component&#10;            JTextField textField = ((JTextField) dateChooser.getDateEditor().getUiComponent());&#10;&#10;            // Find the calendar button by iterating through components&#10;            JButton calendarButton = null;&#10;            for (Component comp : dateChooser.getComponents()) {&#10;                if (comp instanceof JButton) {&#10;                    calendarButton = (JButton) comp;&#10;                    break;&#10;                }&#10;            }&#10;&#10;            if (calendarButton != null) {&#10;                // Create clean rounded borders like the Load Data button&#10;                textField.setBorder(new CleanRoundedBorder(8, true, false)); // Left side rounded&#10;                calendarButton.setBorder(new CleanRoundedBorder(8, false, true)); // Right side rounded&#10;&#10;                // Style the button to match&#10;                calendarButton.setContentAreaFilled(false);&#10;                calendarButton.setFocusPainted(false);&#10;                calendarButton.setOpaque(true);&#10;                calendarButton.setBackground(Color.WHITE);&#10;&#10;                // Style the text field&#10;                textField.setOpaque(true);&#10;                textField.setBackground(Color.WHITE);&#10;            }&#10;        });&#10;&#10;        return dateChooser;&#10;    }&#10;&#10;    private JPanel createEventTablePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;&#10;        // Create table model&#10;        String[] columnNames = {&quot;Name&quot;, &quot;Start&quot;, &quot;End&quot;, &quot;Location&quot;, &quot;Description&quot;, &quot;...&quot;};&#10;        tableModel = new DefaultTableModel(columnNames, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false; // Make table read-only&#10;            }&#10;        };&#10;&#10;        JTable eventTable = new JTable(tableModel);&#10;        eventTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;        eventTable.setFillsViewportHeight(true); // Make table fill available space&#10;        eventTable.setRowSelectionAllowed(false); // Disable row selection&#10;        eventTable.setColumnSelectionAllowed(false); // Disable column selection&#10;&#10;        // Set responsive column widths (proportional rather than fixed)&#10;        eventTable.getColumnModel().getColumn(0).setPreferredWidth(200); // Name&#10;        eventTable.getColumnModel().getColumn(1).setPreferredWidth(120); // Start&#10;        eventTable.getColumnModel().getColumn(2).setPreferredWidth(120); // End&#10;        eventTable.getColumnModel().getColumn(3).setPreferredWidth(140); // Location&#10;        eventTable.getColumnModel().getColumn(4).setPreferredWidth(300); // Description&#10;        eventTable.getColumnModel().getColumn(5).setWidth(10); // More column&#10;&#10;        JScrollPane scrollPane = new JScrollPane(eventTable);&#10;        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);&#10;        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);&#10;        // Remove fixed size to make it truly responsive&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createExportPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout(10, 5));&#10;&#10;        // Status label on the left - make it responsive&#10;        statusLabel = new JLabel(&quot;Select a calendar and date range, then click 'Load Data' to begin&quot;);&#10;        statusLabel.setFont(statusLabel.getFont().deriveFont(Font.ITALIC));&#10;        // Wrap long text if needed&#10;        statusLabel.setPreferredSize(new Dimension(0, 20)); // Height fixed, width flexible&#10;        panel.add(statusLabel, BorderLayout.CENTER);&#10;&#10;        // Export button on the right&#10;        exportButton = new JButton(&quot;Export&quot;);&#10;        exportButton.setBackground(LIGHT_BLUE);&#10;        exportButton.setMinimumSize(new Dimension(80, 35));&#10;        exportButton.setPreferredSize(new Dimension(100, 35));&#10;        exportButton.addActionListener(new ExportActionListener());&#10;        exportButton.setEnabled(false); // Initially disabled until data is loaded&#10;&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));&#10;        buttonPanel.add(exportButton);&#10;        panel.add(buttonPanel, BorderLayout.EAST);&#10;&#10;        return panel;&#10;    }&#10;&#10;    /**&#10;     * Resets the view to its initial state.&#10;     * Clears the table, resets status label, and disables export button.&#10;     * Package-private to restrict access to the controller.&#10;     */&#10;    void reset() {&#10;        tableModel.setRowCount(0); // Clear existing data from the table&#10;        statusLabel.setText(&quot;Select a calendar and date range, then click 'Load Data' to begin&quot;); // Reset status label&#10;        setExportButtonEnabled(false); // Disable export button&#10;    }&#10;&#10;    /**&#10;     * Action listener for the Load Data button&#10;     * Validates inputs and calls the controller to load calendar events.&#10;     * Gets the selected values from the dropdown and date pickers and validates them.&#10;     * If validation fails, shows an error dialog.&#10;     * If validation passes, it calls the controller to load events.&#10;     */&#10;    private class LoadDataActionListener implements ActionListener {&#10;        @Override&#10;        public void actionPerformed(ActionEvent e) {&#10;            int selectedIndex = calendarDropdown.getSelectedIndex();&#10;            if (selectedIndex == -1) {&#10;                showErrorDialog(&quot;Please select a calendar.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Get the calendar ID using the selected index&#10;            String[] calendarIds = (String[]) calendarDropdown.getClientProperty(&quot;calendarIds&quot;);&#10;            String selectedCalendarId = calendarIds[selectedIndex];&#10;&#10;            Date startDate = startDateChooser.getDate();&#10;            Date endDate = endDateChooser.getDate();&#10;&#10;            // Validate inputs&#10;            if (selectedCalendarId == null || selectedCalendarId.isEmpty()) {&#10;                showErrorDialog(&quot;Please select a calendar.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (startDate.after(endDate)) {&#10;                showErrorDialog(&quot;Start date must be before or equal to end date.&quot;);&#10;                return;&#10;            }&#10;&#10;            // Check if date range is too large (more than 1 year)&#10;            Calendar cal = Calendar.getInstance();&#10;            cal.setTime(startDate);&#10;            cal.add(Calendar.YEAR, 1);&#10;            if (endDate.after(cal.getTime())) {&#10;                showErrorDialog(&quot;Date range cannot exceed 1 year.&quot;);&#10;                return;&#10;            }&#10;&#10;            statusLabel.setText(&quot;Loading data...&quot;);&#10;            loadDataButton.setEnabled(false);&#10;&#10;            // Format dates for controller&#10;            SimpleDateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;            String fromDateStr = formatter.format(startDate);&#10;            String toDateStr = formatter.format(endDate);&#10;&#10;            // Call controller method to load events&#10;            controller.loadCalendarEvents(selectedCalendarId, fromDateStr, toDateStr);&#10;            loadDataButton.setEnabled(true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Action listener for the Export button&#10;     */&#10;    private class ExportActionListener implements ActionListener {&#10;        @Override&#10;        public void actionPerformed(ActionEvent e) {&#10;            statusLabel.setText(&quot;Exporting...&quot;);&#10;            exportButton.setEnabled(false);&#10;&#10;            // Call controller method to export events&#10;            controller.exportEvents();&#10;            exportButton.setEnabled(true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the calendar dropdown with available calendars&#10;     *&#10;     * @param calendarIds   Array of calendar IDs&#10;     * @param calendarNames Array of calendar names&#10;     */&#10;    public void updateCalendarList(String[] calendarIds, String[] calendarNames) {&#10;        calendarDropdown.removeAllItems();&#10;&#10;        // Store calendar IDs for later retrieval&#10;        calendarDropdown.putClientProperty(&quot;calendarIds&quot;, calendarIds);&#10;&#10;        // Add calendar names to dropdown&#10;        for (String name : calendarNames) {&#10;            calendarDropdown.addItem(name);&#10;        }&#10;&#10;        // Select first item if available&#10;        if (calendarNames.length &gt; 0) {&#10;            calendarDropdown.setSelectedIndex(0);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates the event table with loaded events&#10;     *&#10;     * @param events 2D array of event data&#10;     */&#10;    public void updateEventTable(CalendarEvent[][] events) {&#10;        tableModel.setRowCount(0); // Clear existing data&#10;        for (CalendarEvent[] event : events) {&#10;            tableModel.addRow(event);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sets the status message&#10;     *&#10;     * @param message The status message to display&#10;     */&#10;    public void setStatusMessage(String message) {&#10;        statusLabel.setText(message);&#10;    }&#10;&#10;    /**&#10;     * Enables or disables the export button and save menu item&#10;     *&#10;     * @param enabled true to enable, false to disable&#10;     */&#10;    public void setExportButtonEnabled(boolean enabled) {&#10;        exportButton.setEnabled(enabled);&#10;        saveMenuItem.setEnabled(enabled);&#10;    }&#10;&#10;    /* Dialogs */&#10;&#10;    /**&#10;     * Shows the About dialog with application information.&#10;     * This method is called when the user selects &quot;About G2iCal&quot; from the Help menu.&#10;     */&#10;    private void showAboutDialog() {&#10;        String aboutMessage = &quot;G2iCal\n&quot; + &quot;Version: Beta 1.0\n&quot; + &quot;G2iCal is a simple application for exporting your google-calendar to a ical file.\n\n&quot; + &quot;© 2025 Dominik Mitzel\n&quot; + &quot;MN: 6633800\n&quot;;&#10;&#10;        JOptionPane.showOptionDialog(this, aboutMessage, &quot;About G2iCal&quot;, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, new String[]{}, // Empty array = no buttons&#10;                null);&#10;    }&#10;&#10;    /**&#10;     * Show Settings dialog.&#10;     * In the settings dialog, the user can change the application settings.&#10;     */&#10;    private void showSettingsDialog() {&#10;        // Get current file name and file path from the controller&#10;        String fileName = controller.getFileName();&#10;        String filePath = controller.getFilePath();&#10;&#10;        // Create the settings dialog&#10;        JDialog settingsDialog = new JDialog(this, &quot;Application Settings&quot;, true);&#10;        settingsDialog.setSize(550, 250);&#10;        settingsDialog.setResizable(false);&#10;        settingsDialog.setLocationRelativeTo(this);&#10;        settingsDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);&#10;&#10;        // Main panel with BorderLayout&#10;        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));&#10;&#10;        // Form panel with GridBagLayout for better control&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        // Export file name&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 0;&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        formPanel.add(new JLabel(&quot;Export File Name:&quot;), gbc);&#10;&#10;        gbc.gridx = 1;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        JTextField fileNameField = new JTextField(fileName, 20);&#10;        formPanel.add(fileNameField, gbc);&#10;&#10;        // Export file path&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 1;&#10;        gbc.fill = GridBagConstraints.NONE;&#10;        gbc.weightx = 0;&#10;        formPanel.add(new JLabel(&quot;Export Location:&quot;), gbc);&#10;&#10;        gbc.gridx = 1;&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.weightx = 1.0;&#10;        JPanel locationPanel = new JPanel(new BorderLayout(5, 0));&#10;        JTextField locationField = new JTextField(filePath, 20);&#10;        locationField.setEditable(false);&#10;        JButton browseButton = new JButton(&quot;Browse...&quot;);&#10;&#10;        browseButton.addActionListener(e -&gt; {&#10;            JFileChooser fileChooser = new JFileChooser();&#10;            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#10;            fileChooser.setDialogTitle(&quot;Select Export Directory&quot;);&#10;            fileChooser.setCurrentDirectory(new java.io.File(locationField.getText()));&#10;&#10;            if (fileChooser.showOpenDialog(settingsDialog) == JFileChooser.APPROVE_OPTION) {&#10;                locationField.setText(fileChooser.getSelectedFile().getAbsolutePath());&#10;            }&#10;        });&#10;&#10;        locationPanel.add(locationField, BorderLayout.CENTER);&#10;        locationPanel.add(browseButton, BorderLayout.EAST);&#10;        formPanel.add(locationPanel, gbc);&#10;&#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;        JButton resetButton = new JButton(&quot;Reset&quot;);&#10;        JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;        JButton saveButton = new JButton(&quot;Save&quot;);&#10;        saveButton.setBackground(LIGHT_BLUE);&#10;&#10;        // Reset to defaults action&#10;        resetButton.addActionListener(e -&gt; {&#10;            int result = JOptionPane.showConfirmDialog(settingsDialog, &quot;Are you sure you want to reset all settings to defaults?&quot;, &quot;Reset Settings&quot;, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);&#10;&#10;            if (result == JOptionPane.YES_OPTION) {&#10;                fileNameField.setText(&quot;calendar_export.ics&quot;);&#10;                locationField.setText(System.getProperty(&quot;user.home&quot;) + java.io.File.separator + &quot;Downloads&quot;);&#10;            }&#10;        });&#10;&#10;        cancelButton.addActionListener(e -&gt; settingsDialog.dispose());&#10;&#10;        saveButton.addActionListener(e -&gt; {&#10;            String newFileName = fileNameField.getText().trim();&#10;            String newFilePath = locationField.getText().trim();&#10;&#10;            // Validate inputs&#10;            if (newFileName.isEmpty()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;File name cannot be empty.&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            if (newFilePath.isEmpty()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;Export location cannot be empty.&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Check if directory exists&#10;            java.io.File directory = new java.io.File(newFilePath);&#10;            if (!directory.exists() || !directory.isDirectory()) {&#10;                JOptionPane.showMessageDialog(settingsDialog, &quot;The specified directory does not exist or is not accessible.&quot;, &quot;Invalid Directory&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Save the settings and close the dialog&#10;            controller.updateSettings(newFileName, newFilePath);&#10;            settingsDialog.dispose();&#10;        });&#10;&#10;        buttonPanel.add(resetButton);&#10;        buttonPanel.add(cancelButton);&#10;        buttonPanel.add(saveButton);&#10;&#10;        // Add panels to main panel&#10;        mainPanel.add(formPanel, BorderLayout.CENTER);&#10;        mainPanel.add(buttonPanel, BorderLayout.SOUTH);&#10;&#10;        settingsDialog.add(mainPanel);&#10;        settingsDialog.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Show error dialog with a message.&#10;     * It is package-private to restrict access to the package.&#10;     *&#10;     * @param message The error message to display.&#10;     */&#10;    void showErrorDialog(String message) {&#10;        JOptionPane.showMessageDialog(this, message, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);&#10;    }&#10;&#10;    private static class CleanRoundedBorder implements Border {&#10;        private final int radius;&#10;        private final boolean leftRounded;&#10;        private final boolean rightRounded;&#10;&#10;        public CleanRoundedBorder(int radius, boolean leftRounded, boolean rightRounded) {&#10;            this.radius = radius;&#10;            this.leftRounded = leftRounded;&#10;            this.rightRounded = rightRounded;&#10;        }&#10;&#10;        @Override&#10;        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {&#10;            Graphics2D g2d = (Graphics2D) g.create();&#10;            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;            g2d.setColor(new Color(160, 160, 160)); // Light gray border&#10;            g2d.setStroke(new BasicStroke(1.0f));&#10;&#10;            // Create the shape&#10;            Shape shape;&#10;            if (leftRounded &amp;&amp; !rightRounded) {&#10;                // Left rounded, right straight&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x, y, width + radius, height - 1, radius, radius);&#10;            } else if (!leftRounded &amp;&amp; rightRounded) {&#10;                // Right rounded, left straight&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x - radius, y, width + radius, height - 1, radius, radius);&#10;            } else {&#10;                // Fully rounded&#10;                shape = new java.awt.geom.RoundRectangle2D.Float(x, y, width - 1, height - 1, radius, radius);&#10;            }&#10;&#10;            g2d.draw(shape);&#10;            g2d.dispose();&#10;        }&#10;&#10;        @Override&#10;        public Insets getBorderInsets(Component c) {&#10;            return new Insets(2, 4, 2, 4);&#10;        }&#10;&#10;        @Override&#10;        public boolean isBorderOpaque() {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ui/model/CalendarModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ui/model/CalendarModel.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package ui.model;&#10;&#10;import com.google.api.client.util.DateTime;&#10;import com.google.api.services.calendar.model.Events;&#10;&#10;import java.util.Observable;&#10;&#10;/**&#10; * Simplified Model class for the Calendar application following MVC pattern.&#10; * This class holds the application state and notifies observers when data changes.&#10; * The business logic is handled by the existing G2iCal infrastructure in the controller.&#10; */&#10;@SuppressWarnings(&quot;deprecation&quot;)&#10;public class CalendarModel extends Observable {&#10;    private String selectedCalendarId;&#10;    private DateTime startDate;&#10;    private DateTime endDate;&#10;    private String fileName;&#10;    private Events fetchedEvents;&#10;    private String status;&#10;&#10;    public CalendarModel() {&#10;        this.status = &quot;Ready&quot;;&#10;    }&#10;&#10;    // Getters and setters with notification&#10;    public String getSelectedCalendarId() {&#10;        return selectedCalendarId;&#10;    }&#10;&#10;    public void setSelectedCalendarId(String selectedCalendarId) {&#10;        this.selectedCalendarId = selectedCalendarId;&#10;        setChanged();&#10;        notifyObservers(&quot;calendarSelected&quot;);&#10;    }&#10;&#10;    public DateTime getStartDate() {&#10;        return startDate;&#10;    }&#10;&#10;    public void setStartDate(DateTime startDate) {&#10;        this.startDate = startDate;&#10;        setChanged();&#10;        notifyObservers(&quot;startDateChanged&quot;);&#10;    }&#10;&#10;    public DateTime getEndDate() {&#10;        return endDate;&#10;    }&#10;&#10;    public void setEndDate(DateTime endDate) {&#10;        this.endDate = endDate;&#10;        setChanged();&#10;        notifyObservers(&quot;endDateChanged&quot;);&#10;    }&#10;&#10;    public String getFileName() {&#10;        return fileName;&#10;    }&#10;&#10;    public void setFileName(String fileName) {&#10;        this.fileName = fileName;&#10;        setChanged();&#10;        notifyObservers(&quot;fileNameChanged&quot;);&#10;    }&#10;&#10;    public Events getFetchedEvents() {&#10;        return fetchedEvents;&#10;    }&#10;&#10;    public void setFetchedEvents(Events fetchedEvents) {&#10;        this.fetchedEvents = fetchedEvents;&#10;        setChanged();&#10;        notifyObservers(&quot;eventsChanged&quot;);&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;        setChanged();&#10;        notifyObservers(&quot;statusChanged&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>